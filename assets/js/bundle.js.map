{"version":3,"file":"bundle.js","sources":["modules/theme.js","main.js","modules/navigation.js","modules/animations.js","modules/faq.js","modules/quotes.js","modules/smoothscroll.js","modules/utils.js"],"sourcesContent":["/**\n * Theme Manager Module\n * Handles theme management, preferences, and switching functionality\n */\n\n// Constants\nconst THEME_STORAGE_KEY = 'theme';\nconst THEME_OPTIONS = ['light', 'dark', 'auto'];\n\n/**\n * Get the user's theme preference\n * Checks localStorage first, then falls back to auto theme\n * @returns {string} The theme preference ('light', 'dark', or 'auto')\n */\nexport function getThemePreference() {\n  const savedTheme = localStorage.getItem(THEME_STORAGE_KEY);\n  return savedTheme && THEME_OPTIONS.includes(savedTheme) ? savedTheme : 'auto';\n}\n\n/**\n * Apply a theme to the document\n * @param {string} theme The theme to apply ('light', 'dark', or 'auto')\n */\nexport function applyTheme(theme) {\n  // Remove all theme classes\n  document.documentElement.classList.remove('light-theme', 'dark-theme', 'auto-theme');\n  \n  // Add the new theme class\n  document.documentElement.classList.add(`${theme}-theme`);\n  \n  // Store the theme preference\n  localStorage.setItem(THEME_STORAGE_KEY, theme);\n  \n  // Apply dark mode class for styling\n  if (theme === 'auto') {\n    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  } else if (theme === 'dark') {\n    document.documentElement.classList.add('dark');\n  } else {\n    document.documentElement.classList.remove('dark');\n  }\n  \n  // Dispatch an event to notify other components of theme change\n  const themeChangeEvent = new CustomEvent('themeChanged', { detail: { theme } });\n  document.dispatchEvent(themeChangeEvent);\n}\n\n/**\n * Toggle between themes (light → dark → auto → light)\n */\nexport function toggleTheme() {\n  const currentTheme = getThemePreference();\n  const currentIndex = THEME_OPTIONS.indexOf(currentTheme);\n  const nextIndex = (currentIndex + 1) % THEME_OPTIONS.length;\n  applyTheme(THEME_OPTIONS[nextIndex]);\n}\n\n/**\n * Initialize theme system\n * Sets up event listeners for OS theme changes\n */\nexport function initTheme() {\n  // Apply initial theme\n  applyTheme(getThemePreference());\n  \n  // Listen for OS theme changes if using auto theme\n  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {\n    if (getThemePreference() === 'auto') {\n      applyTheme('auto');\n    }\n  });\n}","/**\n * Main JavaScript file\n * Initializes and coordinates modules for the portfolio website\n */\n\nimport { initTheme, applyTheme, getThemePreference } from './modules/theme.js';\nimport { \n  initStickyHeader, \n  initBackToTopButton, \n  initMobileMenu, \n  initScrollSpy \n} from './modules/navigation.js';\nimport { \n  initAOS, \n  setupEntranceAnimations, \n  animateSkillBars \n} from './modules/animations.js';\nimport { throttle } from './modules/utils.js';\nimport { initFaqToggles } from './modules/faq.js';\nimport { displayRandomQuote } from './modules/quotes.js';\nimport { initSmoothScrolling } from './modules/smoothscroll.js';\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  // Cache DOM elements\n  const header = document.getElementById('site-header');\n  const backToTopBtn = document.getElementById('back-to-top');\n  const mobileMenuBtn = document.getElementById('mobile-menu-button');\n  const mobileMenu = document.getElementById('mobile-menu');\n  const themeToggleBtn = document.getElementById('theme-toggle');\n  const themeToggleMobileBtn = document.getElementById('theme-toggle-mobile');\n  \n  // Initialize theme system\n  initTheme();\n  \n  // Set up theme toggle buttons\n  if (themeToggleBtn) {\n    themeToggleBtn.addEventListener('click', () => {\n      const currentTheme = getThemePreference();\n      const nextTheme = currentTheme === 'light' ? 'dark' : \n                        currentTheme === 'dark' ? 'auto' : 'light';\n      applyTheme(nextTheme);\n    });\n  }\n  \n  if (themeToggleMobileBtn) {\n    themeToggleMobileBtn.addEventListener('click', () => {\n      const currentTheme = getThemePreference();\n      const nextTheme = currentTheme === 'light' ? 'dark' : \n                        currentTheme === 'dark' ? 'auto' : 'light';\n      applyTheme(nextTheme);\n    });\n  }\n\n  // Initialize navigation components with throttled scroll events\n  initStickyHeader(header);\n  initBackToTopButton(backToTopBtn, 300);\n  initMobileMenu(mobileMenuBtn, mobileMenu);\n  initScrollSpy('.nav-link', 'active');\n  \n  // Initialize animations\n  initAOS({\n    duration: 800,\n    easing: 'ease-in-out',\n    once: true,\n    offset: 50\n  });\n  \n  // Animate skill bars when they come into view\n  animateSkillBars();\n  \n  // Set up entrance animations for elements without AOS\n  setupEntranceAnimations('.animate-on-scroll');\n  \n  // Initialize FAQ toggles\n  initFaqToggles('.faq-toggle');\n  \n  // Display a random testimonial quote\n  displayRandomQuote('.quote', 'animate-fadeIn');\n  \n  // Initialize smooth scrolling for anchor links\n  initSmoothScrolling('a[href^=\"#\"]', '#site-header');\n  \n  // Handle responsive behavior\n  const handleResize = throttle(() => {\n    // Handle any responsive adjustments here\n    if (window.innerWidth >= 1024) { // lg breakpoint in Tailwind\n      mobileMenu.classList.add('hidden');\n    }\n  }, 100);\n  \n  window.addEventListener('resize', handleResize);\n  \n  // Add support for print mode\n  window.addEventListener('beforeprint', () => {\n    document.documentElement.classList.add('print-mode');\n  });\n  \n  window.addEventListener('afterprint', () => {\n    document.documentElement.classList.remove('print-mode');\n  });\n});","/**\n * Navigation Module\n * Handles header scroll effects, mobile menu, and back-to-top functionality\n */\n\n/**\n * Set up sticky header behavior\n * @param {HTMLElement} header The header element to make sticky\n */\nexport function initStickyHeader(header) {\n  if (!header) return;\n\n  window.addEventListener('scroll', () => {\n    if (window.scrollY > 50) {\n      header.classList.add('scrolled');\n    } else {\n      header.classList.remove('scrolled');\n    }\n  });\n}\n\n/**\n * Initialize back to top button functionality\n * @param {HTMLElement} backToTopBtn The back to top button element\n * @param {number} scrollThreshold Scroll position at which to show the button\n */\nexport function initBackToTopButton(backToTopBtn, scrollThreshold = 300) {\n  if (!backToTopBtn) return;\n  \n  // Handle visibility based on scroll position\n  window.addEventListener('scroll', () => {\n    if (window.scrollY > scrollThreshold) {\n      backToTopBtn.classList.remove('opacity-0', 'invisible');\n      backToTopBtn.classList.add('opacity-100', 'visible');\n    } else {\n      backToTopBtn.classList.add('opacity-0', 'invisible');\n      backToTopBtn.classList.remove('opacity-100', 'visible');\n    }\n  });\n  \n  // Handle click event\n  backToTopBtn.addEventListener('click', () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  });\n}\n\n/**\n * Initialize mobile menu functionality\n * @param {HTMLElement} menuButton The button that toggles the mobile menu\n * @param {HTMLElement} mobileMenu The mobile menu element to toggle\n */\nexport function initMobileMenu(menuButton, mobileMenu) {\n  if (!menuButton || !mobileMenu) return;\n  \n  menuButton.addEventListener('click', () => {\n    mobileMenu.classList.toggle('hidden');\n    \n    // Toggle aria-expanded for accessibility\n    const isExpanded = mobileMenu.classList.contains('hidden') ? 'false' : 'true';\n    menuButton.setAttribute('aria-expanded', isExpanded);\n  });\n  \n  // Close menu when clicking outside\n  document.addEventListener('click', (event) => {\n    if (!mobileMenu.contains(event.target) && !menuButton.contains(event.target)) {\n      mobileMenu.classList.add('hidden');\n      menuButton.setAttribute('aria-expanded', 'false');\n    }\n  });\n}\n\n/**\n * Initialize scroll spy functionality to highlight active nav items\n * @param {string} navItemSelector CSS selector for navigation items\n * @param {string} activeClass Class to add to active nav items\n */\nexport function initScrollSpy(navItemSelector = '.nav-link', activeClass = 'active') {\n  const navLinks = document.querySelectorAll(navItemSelector);\n  if (!navLinks.length) return;\n  \n  // Get all sections with IDs that match nav links\n  const sections = Array.from(navLinks).map(link => {\n    const href = link.getAttribute('href');\n    if (href && href.startsWith('#')) {\n      return document.querySelector(href);\n    }\n    return null;\n  }).filter(Boolean);\n  \n  window.addEventListener('scroll', () => {\n    const scrollPosition = window.scrollY + 100; // Offset for header height\n    \n    // Find the current section\n    let currentSection = sections[0];\n    for (const section of sections) {\n      const sectionTop = section.offsetTop;\n      if (scrollPosition >= sectionTop) {\n        currentSection = section;\n      }\n    }\n    \n    // Update active class on nav items\n    if (currentSection) {\n      navLinks.forEach(navLink => {\n        navLink.classList.remove(activeClass);\n        if (navLink.getAttribute('href') === `#${currentSection.id}`) {\n          navLink.classList.add(activeClass);\n        }\n      });\n    }\n  });\n}","/**\n * Animations Module\n * Handles animations, transitions, and dynamic visual effects\n */\n\n/**\n * Initialize Animate on Scroll (AOS) library if available\n * @param {Object} options AOS configuration options\n */\nexport function initAOS(options = {}) {\n  if (typeof AOS === 'undefined') return;\n  \n  const defaultOptions = {\n    duration: 800,\n    easing: 'ease-in-out',\n    once: true,\n    offset: 50\n  };\n  \n  AOS.init({...defaultOptions, ...options});\n}\n\n/**\n * Apply entrance animation to element when it enters viewport\n * Fallback for when AOS is not available\n * @param {string} selector CSS selector for elements to animate\n * @param {string} animationClass CSS class containing the animation\n */\nexport function setupEntranceAnimations(selector, animationClass = 'animate-fadeIn') {\n  if (typeof AOS !== 'undefined') return; // Skip if AOS is handling animations\n  \n  const elements = document.querySelectorAll(selector);\n  if (!elements.length) return;\n\n  const observer = new IntersectionObserver((entries) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        entry.target.classList.add(animationClass);\n        observer.unobserve(entry.target);\n      }\n    });\n  }, {\n    threshold: 0.1,\n    rootMargin: '0px 0px -50px 0px'\n  });\n  \n  elements.forEach(element => {\n    observer.observe(element);\n  });\n}\n\n/**\n * Animate skill bars by setting their width when visible\n * @param {string} selector CSS selector for skill bar elements\n * @param {string} valueAttribute Data attribute containing skill percentage\n */\nexport function animateSkillBars(\n  selector = '.skill-level', \n  valueAttribute = 'data-value'\n) {\n  const skillBars = document.querySelectorAll(selector);\n  if (!skillBars.length) return;\n\n  const observer = new IntersectionObserver((entries) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        const value = entry.target.getAttribute(valueAttribute) || '0';\n        entry.target.style.width = `${value}%`;\n        observer.unobserve(entry.target);\n      }\n    });\n  }, {\n    threshold: 0.1,\n    rootMargin: '0px 0px -100px 0px'\n  });\n  \n  skillBars.forEach(bar => {\n    observer.observe(bar);\n  });\n}\n\n/**\n * Set up parallax scroll effect for elements\n * @param {string} selector CSS selector for elements to apply parallax effect\n * @param {number} speed Parallax speed factor (1 = normal, <1 = slower, >1 = faster)\n */\nexport function setupParallax(selector = '.parallax', speed = 0.5) {\n  const elements = document.querySelectorAll(selector);\n  if (!elements.length) return;\n\n  window.addEventListener('scroll', () => {\n    const scrollY = window.scrollY;\n    \n    elements.forEach(element => {\n      const topOffset = element.getBoundingClientRect().top + scrollY;\n      const yPos = -(scrollY - topOffset) * speed;\n      \n      element.style.transform = `translateY(${yPos}px)`;\n    });\n  });\n}","/**\n * FAQ Module\n * Handles FAQ accordion/toggle functionality\n */\n\n/**\n * Initialize FAQ toggle functionality\n * @param {string} toggleSelector CSS selector for FAQ toggle buttons\n * @param {string} contentSelector CSS selector for FAQ content elements\n * @param {string} iconSelector CSS selector for toggle icon\n * @param {string} activeClass CSS class to use for active/expanded state\n */\nexport function initFaqToggles(\n  toggleSelector = '.faq-toggle',\n  contentSelector = '.faq-content',\n  iconSelector = '.icon',\n  activeClass = 'rotate-180'\n) {\n  const toggleButtons = document.querySelectorAll(toggleSelector);\n  \n  toggleButtons.forEach(button => {\n    // Set up event listener for each FAQ toggle\n    button.addEventListener('click', () => {\n      // Get the associated content (next sibling by default)\n      const content = button.nextElementSibling;\n      if (!content) return;\n      \n      // Toggle visibility of content\n      content.classList.toggle('hidden');\n      \n      // Find and toggle the icon rotation\n      const icon = button.querySelector(iconSelector);\n      if (icon) {\n        icon.classList.toggle(activeClass);\n      }\n      \n      // Add accessibility attributes\n      const isExpanded = !content.classList.contains('hidden');\n      button.setAttribute('aria-expanded', isExpanded ? 'true' : 'false');\n      \n      // Additional animation for smooth opening/closing\n      if (isExpanded) {\n        content.style.maxHeight = `${content.scrollHeight}px`;\n        content.classList.add('opacity-100');\n        content.classList.remove('opacity-0');\n      } else {\n        content.style.maxHeight = '0';\n        content.classList.add('opacity-0');\n        content.classList.remove('opacity-100');\n      }\n    });\n    \n    // Initialize state\n    const content = button.nextElementSibling;\n    if (content) {\n      // Set initial state - closed by default\n      button.setAttribute('aria-expanded', 'false');\n    }\n  });\n}","/**\n * Quotes Module\n * Handles random quote selection and display\n */\n\n/**\n * Display a random quote from a collection\n * @param {string} quoteSelector CSS selector for quote elements\n * @param {string} animationClass CSS class to apply for animation\n */\nexport function displayRandomQuote(\n  quoteSelector = '.quote', \n  animationClass = 'animate-fadeIn'\n) {\n  // Get all available quotes\n  const quotes = document.querySelectorAll(quoteSelector);\n  if (!quotes.length) return;\n  \n  // Hide all quotes initially\n  quotes.forEach(quote => {\n    quote.classList.add('hidden');\n    quote.setAttribute('aria-hidden', 'true');\n  });\n  \n  // Select a random quote\n  const randomIndex = Math.floor(Math.random() * quotes.length);\n  const selectedQuote = quotes[randomIndex];\n  \n  // Display the selected quote with animation\n  selectedQuote.classList.remove('hidden');\n  selectedQuote.classList.add(animationClass);\n  selectedQuote.setAttribute('aria-hidden', 'false');\n  \n  return randomIndex; // Return the selected index for potential reference\n}\n\n/**\n * Rotate through quotes at a specified interval\n * @param {string} quoteSelector CSS selector for quote elements\n * @param {number} intervalMs Time in milliseconds between quote rotations\n * @param {string} animationClass CSS class to apply for animation\n * @returns {number} The interval ID (can be used to clear the interval)\n */\nexport function rotateQuotes(\n  quoteSelector = '.quote',\n  intervalMs = 10000,\n  animationClass = 'animate-fadeIn'\n) {\n  // Initial display\n  let currentIndex = displayRandomQuote(quoteSelector, animationClass);\n  const quotes = document.querySelectorAll(quoteSelector);\n  if (!quotes.length) return null;\n  \n  // Set up interval to rotate quotes\n  const intervalId = setInterval(() => {\n    // Hide current quote\n    quotes[currentIndex].classList.add('hidden');\n    quotes[currentIndex].setAttribute('aria-hidden', 'true');\n    \n    // Move to next quote\n    currentIndex = (currentIndex + 1) % quotes.length;\n    \n    // Show new quote\n    quotes[currentIndex].classList.remove('hidden');\n    quotes[currentIndex].classList.add(animationClass);\n    quotes[currentIndex].setAttribute('aria-hidden', 'false');\n  }, intervalMs);\n  \n  return intervalId;\n}","/**\n * Smooth Scrolling Module\n * Handles smooth scrolling behavior for anchor links with header offset\n */\n\n/**\n * Initialize smooth scrolling for all anchor links\n * @param {string} selector CSS selector for anchor links\n * @param {string} headerSelector CSS selector for the sticky header (for offset calculation)\n */\nexport function initSmoothScrolling(\n  selector = 'a[href^=\"#\"]',\n  headerSelector = '#site-header'\n) {\n  const links = document.querySelectorAll(selector);\n  const header = document.querySelector(headerSelector);\n  \n  if (!links.length) return;\n\n  links.forEach(link => {\n    link.addEventListener('click', function(e) {\n      // Get the target element\n      const targetId = this.getAttribute('href');\n      \n      // Skip empty anchors or javascript:void(0)\n      if (targetId === '#' || targetId === '#0') return;\n      \n      const targetElement = document.querySelector(targetId);\n      if (!targetElement) return;\n      \n      // Prevent default anchor behavior\n      e.preventDefault();\n      \n      // Calculate the position to scroll to, with header offset\n      const headerHeight = header ? header.offsetHeight : 0;\n      const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset - headerHeight;\n      \n      // Perform the smooth scroll\n      window.scrollTo({\n        top: targetPosition,\n        behavior: 'smooth'\n      });\n      \n      // Update URL hash without jumping\n      if (window.history && window.history.pushState) {\n        history.pushState(null, null, targetId);\n      }\n    });\n  });\n}\n\n/**\n * Scroll to a specific element by its ID\n * @param {string} elementId ID of the element to scroll to\n * @param {string} headerSelector CSS selector for the sticky header\n * @param {number} additionalOffset Additional offset in pixels\n */\nexport function scrollToElement(\n  elementId,\n  headerSelector = '#site-header', \n  additionalOffset = 0\n) {\n  // Remove leading # if present\n  const id = elementId.startsWith('#') ? elementId.substring(1) : elementId;\n  const element = document.getElementById(id);\n  \n  if (!element) return false;\n  \n  // Calculate header height for offset\n  const header = document.querySelector(headerSelector);\n  const headerHeight = header ? header.offsetHeight : 0;\n  \n  // Calculate final position with all offsets\n  const targetPosition = element.getBoundingClientRect().top + \n                        window.pageYOffset - \n                        headerHeight - \n                        additionalOffset;\n  \n  // Scroll smoothly\n  window.scrollTo({\n    top: targetPosition,\n    behavior: 'smooth'\n  });\n  \n  return true;\n}","/**\n * Utility Module\n * General utility functions used across the site\n */\n\n/**\n * Debounce function to limit how often a function can be called\n * @param {Function} func Function to debounce\n * @param {number} wait Wait time in milliseconds\n * @returns {Function} Debounced function\n */\nexport function debounce(func, wait = 100) {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(this, args), wait);\n  };\n}\n\n/**\n * Throttle function to limit the rate at which a function is executed\n * @param {Function} func Function to throttle\n * @param {number} limit Limit in milliseconds\n * @returns {Function} Throttled function\n */\nexport function throttle(func, limit = 100) {\n  let inThrottle;\n  return function(...args) {\n    if (!inThrottle) {\n      func.apply(this, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\n/**\n * Check if an element is in viewport\n * @param {HTMLElement} element Element to check\n * @param {number} offset Optional offset in pixels\n * @returns {boolean} True if element is in viewport\n */\nexport function isInViewport(element, offset = 0) {\n  if (!element) return false;\n  \n  const rect = element.getBoundingClientRect();\n  return (\n    rect.top <= (window.innerHeight + offset) && \n    rect.bottom >= (0 - offset) &&\n    rect.left <= (window.innerWidth + offset) && \n    rect.right >= (0 - offset)\n  );\n}\n\n/**\n * Get the current breakpoint based on window width\n * Matches Tailwind's default breakpoints\n * @returns {string} Current breakpoint ('xs', 'sm', 'md', 'lg', 'xl', '2xl')\n */\nexport function getCurrentBreakpoint() {\n  const width = window.innerWidth;\n  \n  if (width < 640) return 'xs';\n  if (width < 768) return 'sm';\n  if (width < 1024) return 'md';\n  if (width < 1280) return 'lg';\n  if (width < 1536) return 'xl';\n  return '2xl';\n}\n\n/**\n * Add event listeners and automatically remove them when element is destroyed\n * @param {HTMLElement} element Element to attach listener to\n * @param {string} event Event name (e.g. 'click')\n * @param {Function} callback Event callback function\n */\nexport function safeEventListener(element, event, callback) {\n  if (!element) return;\n  \n  // Create the actual event handler\n  const handler = (e) => callback(e);\n  \n  // Add the event listener\n  element.addEventListener(event, handler);\n  \n  // Set up automatic cleanup using MutationObserver\n  const observer = new MutationObserver((mutations) => {\n    mutations.forEach((mutation) => {\n      if (mutation.removedNodes.length) {\n        Array.from(mutation.removedNodes).forEach((node) => {\n          if (node === element || node.contains(element)) {\n            element.removeEventListener(event, handler);\n            observer.disconnect();\n          }\n        });\n      }\n    });\n  });\n  \n  // Start observing document for element removal\n  observer.observe(document.body, { childList: true, subtree: true });\n}\n\n/**\n * Check if the user's device supports touch events\n * @returns {boolean} True if device supports touch\n */\nexport function isTouchDevice() {\n  return ('ontouchstart' in window) || \n         (navigator.maxTouchPoints > 0) || \n         (navigator.msMaxTouchPoints > 0);\n}"],"names":["THEME_STORAGE_KEY","THEME_OPTIONS","getThemePreference","savedTheme","localStorage","getItem","includes","applyTheme","theme","document","documentElement","classList","remove","add","setItem","window","matchMedia","matches","themeChangeEvent","CustomEvent","detail","dispatchEvent","addEventListener","header","getElementById","backToTopBtn","mobileMenuBtn","mobileMenu","themeToggleBtn","themeToggleMobileBtn","currentTheme","scrollY","initStickyHeader","scrollThreshold","scrollTo","top","behavior","initBackToTopButton","menuButton","toggle","isExpanded","contains","setAttribute","event","target","initMobileMenu","navItemSelector","activeClass","navLinks","querySelectorAll","length","sections","Array","from","map","link","href","getAttribute","startsWith","querySelector","filter","Boolean","scrollPosition","currentSection","section","offsetTop","forEach","navLink","id","initScrollSpy","options","AOS","init","duration","easing","once","offset","initAOS","selector","valueAttribute","skillBars","observer","IntersectionObserver","entries","entry","isIntersecting","value","style","width","unobserve","threshold","rootMargin","bar","observe","animateSkillBars","animationClass","elements","element","setupEntranceAnimations","toggleSelector","contentSelector","iconSelector","button","content","nextElementSibling","icon","maxHeight","scrollHeight","initFaqToggles","quoteSelector","quotes","quote","randomIndex","Math","floor","random","selectedQuote","displayRandomQuote","headerSelector","links","e","targetId","this","targetElement","preventDefault","headerHeight","offsetHeight","targetPosition","getBoundingClientRect","pageYOffset","history","pushState","initSmoothScrolling","handleResize","func","limit","inThrottle","args","apply","setTimeout","throttle","innerWidth"],"mappings":"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"}